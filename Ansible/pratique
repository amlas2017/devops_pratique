// Préparer l'environnement/cluster pour ansible :
   ----> https://www.linuxtricks.fr/wiki/ansible-automatiser-la-gestion-de-serveurs

// lister tous les nodes:
root$ ansible --list-hosts all
$ ansible -i inventory --list-hosts all
hass$ ansible -i inventory -m ping node1

// Ajouter plusieurs lignes au fichier /etc/hosts :
      cat >>/etc/hosts<<EOF
      172.42.42.100 master
      172.42.42.101 worker1
      172.42.42.102 worker2
      EOF
 
// Espace disque d'un noeud
[vagrant@server00 ~]$ ansible server01 -a "df -h"      -----> disque info.
[vagrant@server00 ~]$ ansible server01 -a "free -m"    -----> mémoire info.

// Install httpd via systemd avec ansible ad-hoc
$ ansible cluster-servers -b -m yum -a name="httpd state=latest"     -----> installer d'abord httpd
$ ansible cluster-servers -b -m systemd -a "name=httpd state=started"    -----> starter le service

// Préparation professionnelle d'inventory -------->   http://xplordat.com/2017/12/12/elk-stack-with-vagrant-and-ansible/
---> Exemples d'inventory sans modifier ni /etc/hosts(de ansible-manager) ni /etc/ansible/hosts
node1 ansible_host=172.20.20.10 ansible_user=vagrant ansible_ssh_private_key_file=.vagrant/machines/node1/virtualbox/private_key
node2 ansible_host=172.20.20.20 ansible_user=vagrant ansible_ssh_private_key_file=.vagrant/machines/node2/virtualbox/private_key
node3 ansible_host=172.20.20.30 ansible_user=vagrant ansible_ssh_private_key_file=.vagrant/machines/node3/virtualbox/private_key

[kafka_broker_nodes]
node[1:3]







// Tester la synthaxe du playbook avant de la lancer ----->  ansible-playbook  playbook.yml --syntax-check

// Playbook pour installer les dépendances (Centos)
---
- name: Installation du serveur
  hosts: all
  become: yes   # ou  remote_user: root
  tasks:
    - yum: name=epel-release state=latest   # ---->  Impossible d'installer htop sans cette ligne
    - name: Installation de dependances
      yum: name={{ item }} state=latest
      with_items:
       - vim
       - tree
       - htop
       - git
       - curl
       - wget
       - net-tools

// playbook pour gérer les users (groups , clé ssh , ...)
---
- hosts: all
  remote_user: root
  vars:
    user: amlas1
    groupes: gamlas
  tasks:
    - group:
        name: "{{groupes}}"
        state: present

    - name: Add the user {{user}}  # les " " ne sont pas demandés ici
      user:
        name: "{{user}}"        #   les  " " sont obligatoires ici
        shell: /bin/bash
        groups: "{{groupes}}"
        append: yes
    
    - name: générer clé ssh
      user:
        name: "{{user}}"
        generate_ssh_key: yes
        ssh_key_bits: 2048
        ssh_key_file: .ssh/id_rsa

// Les tags
Lorsque votre playbook est assez gros et que vous souhaitez en tester qu’une partie, vous n’allez pas jouer tout le playbook. 
Pour cela, vous allez une solution : les tags. Vous pouvez appliquer les tags à des plays ou des tasks (tâches). Ils s’utilisent de la manière suivante :
exemple:
---
...
- name: install nginx
        yum:
          name: nginx
          state: present
        tags:
          - installation
...          
          
----> ansible-playbook -i hosts deploy.yml --tags "installation"  
--> En jouant le playbook, on ne verra que la partie installation(la task « install nginx » taggé « installation » s'execute.

// gather_facts
gather facts == Ansible recueille des faits. Il se connecte à la machine cible puis récupère un certain nombre d’infos comme :
l'OS, les IP, la mémoire, le disque, etc. Ensuite, il stocke ces informations dans des variables qu’on nomme facts.
Exemple ----> afficher le nom du système d’exploitation installé sur la machine cible:

---
- name: show os name
  hosts: all
  gather_facts: true
  become: yes
  become_user: root
  tasks:
    - name: show operating system name
      debug:
        msg: "Operating system name is : {{ ansible_distribution }}"                                                       
    










