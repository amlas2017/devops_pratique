// Le noyau de Linux a deux fonctions principales :
   i) Contrôler l'accès aux périphériques physiques de l'ordinateur,
  ii) Programmer à quel moment et de quelle façon les processus vont interagir avec ces périphériques.

// La commande sysctl
   /sbin/sysctl est utilisée pour afficher, définir et automatiser les paramètres du noyau dans le répertoire /proc/sys/.

// La commande nc   ?????

// Install JDK8
     $ sudo yum -y install java-1.8.0-openjdk

// Variables d'environnement:
export ZK_HOME=/opt/zookeeper     ???

// Infos CPU
$ cat /proc/cpuinfo
$ cat /proc/cpuinfo | grep -i "^processor" | wc -l        nombre de coeurs
$ lscpu
$ lshw -C CPU


#################################################################################################################################
                                                            awk
#################################################################################################################################
// Lister tous les users 'physiques' (non système et dont UID >= 1000):
$ awk -F: '$3 > 999 {print $1}' /etc/passwd




// La commande xargs ( ici pour supprimer ansible + repo (epel) dans centos
      $ rpm -qa | grep ansible | xargs rpm -e   -----> ( -e pour erase, -a pour all )
      $ rpm -qa | grep -i epel | xargs rpm -e

#################################################################################################################################
                                                            Systemd 
#################################################################################################################################
// Pour vérifier si Systemd est installé, on tape :   ps -p 1 
// Tous les services actifs : $ systemctl list-units --type=service
// Si un service est actif : $ systemctl is-active mon_service

// L'IP de la machine  ------> hostname -I

// cut -d: -f6 /etc/passwd   ----> affiche le 6eme champ du fichier /etc/passwd, dont le séparateur de champs est ":".

// Infos du host (version/distribution d' OS):
centos -----> sudo hostnamectl   
ubuntu -----> sudo cat /etc/lsb-release

#################################################################################################################################
                                                            fuser
#################################################################################################################################
'fuser' permet de lister les processus liés à un système de fichiers.

// Libérer le port 8080  ------>     $ sudo fuser -k -n tcp 8080
À utiliser avec précaution et en connaissance de cause, la commande fuser avec l'option -k tue en une seule ligne de commande 
les process accédant à un fichier(ou filesystem) sans devoir lancer unitairement la commande kill. 

#################################################################################################################################
                                                Synchronisation avec rsync 
#################################################################################################################################
$ rsync  -vr ./dossier1/ ./dossier2
$ rsync chemin/vers/source chemin/vers/cible
$ rsync -auvx /home/hadoop/.bashrc hadoop-newdatanode:/home/hadoop/      ( Copy Hadoop folder to Slave Servers )
L'option -a, mode archivage, permet de copier de manière récursive, de préserver les permissions et de ne pas suivre les liens 
symboliques

// Modifier le compte d'un user avec usermod
usermod modifie les fichiers d'administration des comptes du système selon les modifications qui ont été indiquées sur la ligne
de commande : sudo usermod -g groupe-existant user-existant

//**************************************************** SUID  *******************************************************************
Il permet de faire en sorte de lancer un programme en tant que l'user qui possède le fichier et non en tant que celui qui lance
le fichier.  ---->  chmod 4755 nom_du_fichier   ,  setuid=4
             ---->  chmod 6755 nom_du_fichier   , 6 = setuid(4) + setgid(2)

#################################################################################################################################
                                                       journalctl 
#################################################################################################################################         

// Checker les logs pour un service : ----> journalctl --help
sudo journalctl --unit elasticsearch (log pour elasticsearch)  ou sudo journalctl -u sshd  <--------  Important !!!!!
sudo journalctl -f    ----> derniers événements 
sudo journalctl -p err  ---->  logs des erreurs   <-----------------------  Important !!!!!
sudo journalctl --since "2020-01-19 19:32:00"
sudo journalctl --until "2020-01-10 22:00:00"
sudo journalctl -since "2020-01-19 19:32:00" --until "2016-01-19 22:00:00"
sudo journalctl --since "10 minutes ago"
sudo journalctl /usr/sbin/sshd


// Liste de packages installés ubuntu pour les supprimer...
$ dpkg --list

// Si une commande par erreur a été lancée en AVANT-PLAN et qu'on veut récupérer l'invite de commandes,il faudra faire dans l'ordre:
Ctrl + Z : pour mettre en pause le programme et récupérer l'invite de commandes ;
bg : pour que le processus continue à tourner mais en arrière-plan.
La commande fg renvoie un processus au premier plan (la commande jobs liste les processus qui tournent en arrière-plan).

// Etat su système ---> taper w dans l'invite de commandes
// La durée de fonctionnement de l'ordinateur -----> $ uptime  ---> plus d'infos 

// Execution de commandes en arrière plan avec &  -----> $ find / -name "*log" > sortie_find.txt 2>&1 & (les erreurs vers sortie &1)
// Avec l'option & ,le processus reste attaché à la console: si la console est fermée ou que l'user se déconnecte, le processus
// sera automatiquement arrêté.Si on veut que le processus continue, il faut lancer la commande nohup :
 $ nohup find / -name "*log"    ----> La sortie de la commande est par défaut redirigée vers un fichier nohup.out.
 
###################################################################################################################################
                                                Commandes utiles VIM   ----> vimtutor fr
###################################################################################################################################
- copier une ligne : echap+v + curseur au début de ligne + Y  et  y+w pour copier un mot
- coller une ligne : p ou P
- copier 5 ligne à partir du curseur ----> 5yy  et coller p
- supprimer une ligne : echap + dd    ,   `echap + cc` supprime le contenu de la ligne
- supprimer 5 lignes à partir du curseur ---> 5dd
- Pour effacer jusqu'à la fin de la ligne courante : d$
- annuler une modification : echap + u  (undo)  et ctrl+r (redo)
- rechercher un mot ----> /mot + entrée , l'occurence suivant n
- Chercher et remplacer --->  :%s/mot-cherché/nouveau-mot/g
// Commenter des lignes VIM:
- Pour commenter les lignes 15 à 30 ---------------->  ESC + :15,30s/^/#   et pour décommenter  :15,30s/^#
- Pour commenter les 23 lignes suivantes (par rapport au curseur) :ESC + :.,+23s/^/#  

- Pour activer la souris dans VIM ----> :set mouse=a

###################################################################################################################################
                                                        Commande FIND
###################################################################################################################################

// Trouver un fichier avec find (find cherche dans le disque) 
find -name "syslog*"
find /var/log/ -name "syslog*"   ----> cherche à /var/log/
find /var/log/ -name "syslog*" -type f  ----->  type est un fichier (d pour dossier)
find  ~ -size +1G    ----->  tous le fichiers de plus de 1Go

// Comande tail
tail -f /var/log/access.log    ---->  affiche en mode debug ( après chaque execution) 
......

// Gestion des logs
find  /var/log  -size +1M    ---> les logs qui ont +1Mo
find -name "*.txt" -atime 1  ---> nombre de jours qui vous séparent du dernier accès à un fichier *.txt

##################################################################################################################################
                                                         Commande sed
##################################################################################################################################
  sed -i 's/mot_original/nouveau_mot/g' nom_fichier.txt  ----> (s = substitution, g = tous les mots de la ligne)
  
  sed -e      -------->    commande uniligne ( cad n'affiche rien)
  sed -f fichier    --------->     passage de commande par un script
  sed -i      --------->   modifie directement le fichier source au lieu de rediriger vers la sortie standard
  sed '1d;4d' test.txt  ------>  supprimer les lignes 1 et 4.
  sed '1,4d' test.txt   ------>  supprimer les lignes de 1 à 4.
  sed '/^#/d' test.txt  ------>  supprimer les lignes qui commencent par #.
  sed '1d;/^#/d' test.txt  -------> supprimer la première ligne et toutes les lignes qui commencent par #.
  sed '1,4p' test.txt  ------->  Afficher les lignes 1 à 4. Par défaut, sed affiche en plus tout le contenu du fichier. 
                                 Les lignes demandées apparaissent donc en double.
  sed -n '1,4p' test.txt  ------->  L'option -n permet de ne pas afficher le reste du fichier.                              
  
  sed -i -e 's/ancienMot/nouveauMot/g' fichier.txt  ----> remplacer ancienMot par nouveauMot dans fichier.txt sans rien afficher.
                                                    ----> très pratique dans les scripts.
  
// Commande tee : la sortie de la 1ère commade est stockée dans un fichier.Avec l'option -a , tee n'écrasera pas l'ancien fichier.
echo "deb http://packages.elastic.co/kibana/4.6/debian stable main" | sudo tee -a /etc/apt/sources.list.d/kibana.list
Exemple: cat id_rsa.pub | tee -a authorized_keys  
   ----> copier le fichier id_rsa.pub (en l'affichant dans sdout) dans authorized_keys (sans écraser ce dernier).

// Commande grep
grep -i ---> rend la recherche insensible à la casse
grep -r ---> effectue une recherche récursive

// Quelques commandes Filesystem
/etc/fstab ---> la table des systèmes de fichiers montés à chaque démarrage de Linux
/etc/mtab ---> la table des systèmes de fichiers qui sont montés
/etc/passwd ---> le fichier de configuration des comptes utilisateurs
/etc/group ---> le fichier de configuration des groupes
/etc/shadow ---> le fichier de configuration des mots de passe

// Lister les process (statique)
   // Lister all processes --->  ps -ax or -e
   // lister  by user ------> ps -u
sudo ps aux | grep java    ---->  ps java est-il  run?
sudo ps a
pstree   --------> arbre des processus

// Processus lancés par un user ----> ps -u utilisateur
// Liste dynamique des processus   ---> top  ou   htop

###################################################################################################################################
                                                Commandes netstat  &  ss (sockets statistics)
##################################################################################################################################
// Lister les ports
sudo netstat -tulpn | grep LISTEN
sudo netstat -tulpn | grep 80     // le process qui écoute sur le port 80

sudo ss -ntlup | grep 2181  ---->  La commande ss obtient ses informations directement à partir de l'espace noyau (donc déjà plus
                                   rapide que l’agrégation de données depuis des fichiers)

###################################################################################################################################
                                                Commandes utiles lsof
###################################################################################################################################
// La commande lsof
lsof -i  ----->   tous services internet TCP/UDP
lsof -i tcp  ---->  tous services TCP
lsof -i udp  ---->   tous services UDP
lsof -i tcp:80    ----->  services TCP sur port 80
lsof -u toto   ---->  fichiers ouverts par l'utilisateur "toto"
lsof +D /tmp      ------->   savoir qui utilise les fichiers d'un répertoire
Les PID des process qui écoutent sur le port 8080 avec lsof  ------->  sudo lsof -n -i:8080 | grep LISTEN | awk '{ print $2 }'
Tuer le processus qui utilise le port 80    ------>  sudo kill $(sudo lsof -t -i :80)
                                    ou    ------> sudo lsof -i :80 | awk 'NR>1 { print $2 }' | xargs sudo kill  
Tuer tous les processus d'un user "hass" --->  $ for i in `lsof -t -u hass`; do kill -9 $i; done

// Si on ne veut pas ni voir le résultat d'une commande ni le stocker dans un fichier. L'astuce consiste à rediriger le résultat dans /dev/null. 
C'est un peu le « trou noir » de Linux : tout ce qui va là-dedans disparaît immédiatement.

// Lister les users
sudo less /etc/passwd   -----> affiche une liste à 7 colonnes
sudo cut -d: -f1 /etc/passwd    -----> selectionner la 1ère colonnee user , délimiteur est ":"
sudo awk -F: '{ print $1 }' /etc/passwd  -----> pareil : selectionner la 1ère colonne (nom de user)
avec un getent et grep , on trouve le nom du user : getent passwd  | grep amlas | awk -F: '{ print $1 }'
- nombre de user: sudo getent passwd | wc -l

// Créer un lien symbolique
$ ln  -s  /nom_du_dossier_source  nom_du_lien    (répertoire courant)
$ ln  -s  /emplacement/nom_du_fichier_source  nom_du_lien
$ ln -s   /emplacement/nom_du_fichier_source /emplacement/nom_du_lien (chemin absolu)

// Les flux de redirection
2> : redirige les erreurs dans un fichier (s'il existe déjà, il sera écrasé) ;
2>> : redirige les erreurs à la fin d'un fichier (s'il n'existe pas, il sera créé) ;
2>&1 : redirige les erreurs au même endroit et de la même façon que la sortie standard.
Pour virer le flux vers le trou noir  ---->    >> /dev/null

// verbose = affiche ce qu'il fait

// Les commandes entre les `commande1 commande2` permettent d'insérer le résultat d'une commande dans une autre commande. 

****************************************************** RSYSLOG ****************************************************************
Rsyslog est un logiciel libre utilisé sur des systèmes d'exploitation de type Unix (Unix, Linux) transférant les messages des 
journaux d'événements sur un réseau IP. Rsyslog implémente le protocole basique syslog - qui centralise les journaux d'événements,
permettant de repérer plus rapidement et efficacement les défaillances d'ordinateurs présents sur un réseau. Il présente la 
particularité d'en étendre les fonctionnalités en permettant, notamment, de filtrer sur des champs, de filtrer à l'aide 
d'expressions régulières et l'utilisation du protocole TCP de la couche transport.

Les fonctionnalités principales :
* il remplace facilement syslog (les règles de syslog peuvent être simplement copiées dans /etc/rsyslog) 2
* il peut écrire les événements dans une base de données (MySQL ou postgreSQL)
* il gère la rotation automatique des fichiers
* il peut mettre en tampon (sous forme de fichiers) des événements
* il gère GSS-API et TLS 2
* il peut être utilisé comme un relais et peut être configuré pour enregistrer les points de passage
* il peut utiliser son propre protocole réseau : RELP (Reliable Event Logging Protocol) qui offre une meilleure garantie de 
  réception des événements par le serveur.
* il peut utiliser un format de date complet (incluant l'année, contrairement au syslog de base qui n'inclut jamais l'année) et
  pouvant être précis jusqu'au millième de seconde (contrairement à syslog qui n'est précis qu'à la seconde).

Rsyslog implémente syslog. Ainsi les outils utilisés pour syslog restent valable. En particulier l'utilitaire logger.
     $ logger System rebooted
     # tail -f /var/log/syslog

// Dans la configuration par défaut, le journal de systemd n'est pas persistant(suppression des logs à chaque redémarrage).
   ---> Ainsi on peut modififier la directives correpondenste dans le fichier /etc/systemd/journal.conf




